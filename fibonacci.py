import hashlib
import ecdsa
import base58
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import time
import requests

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "TOKEN BOT"
# –ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @TON_OPEN_TON)
CHANNEL_ID = "@TON_OPEN_TON"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
def generate_private_key(fib_number):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ –≤ 256-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    private_key_int = fib_number % (2**256)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ –±–∞–π—Ç—ã (32 –±–∞–π—Ç–∞)
    private_key = private_key_int.to_bytes(32, byteorder="big")
    return private_key

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏-–≥—Ä–∞—Ñ–∏–∫–∏ 16x16
def create_emoji_grid(private_key):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É
    binary_string = "".join(f"{byte:08b}" for byte in private_key)
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 16x16
    grid = ""
    for i in range(16):
        for j in range(16):
            index = i * 16 + j
            if index < len(binary_string):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±–∏—Ç–∞
                grid += "üü©" if binary_string[index] == "1" else "‚¨úÔ∏è"
            else:
                grid += "‚¨úÔ∏è"  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
        grid += "\n"
    return grid

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bitcoin-–∞–¥—Ä–µ—Å–∞
def generate_bitcoin_address(private_key):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    sk = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)
    vk = sk.verifying_key
    public_key = b"\x04" + vk.to_string()  # –ù–µ—Å–∂–∞—Ç—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á

    # –•—ç—à–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    sha256_bpk = hashlib.sha256(public_key).digest()
    ripemd160_bpk = hashlib.new("ripemd160", sha256_bpk).digest()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–µ–≤–æ–π –±–∞–π—Ç (0x00 –¥–ª—è Bitcoin)
    network_byte = b"\x00"
    hashed_public_key = network_byte + ripemd160_bpk

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
    checksum = hashlib.sha256(hashlib.sha256(hashed_public_key).digest()).digest()[:4]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
    address_bytes = hashed_public_key + checksum
    address = base58.b58encode(address_bytes).decode("utf-8")

    return private_key.hex(), address

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Bitcoin —á–µ—Ä–µ–∑ API
def check_balance(address):
    try:
        response = requests.get(f"https://blockchain.info/rawaddr/{address}", timeout=10)
        if response.status_code == 200:
            data = response.json()
            balance = data.get("final_balance", 0)  # –ë–∞–ª–∞–Ω—Å –≤ —Å–∞—Ç–æ—à–∏
            transactions = data.get("n_tx", 0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            return balance, transactions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
    return 0, 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Bitcoin Cash —á–µ—Ä–µ–∑ API
def check_bitcoin_cash_balance(address):
    try:
        response = requests.get(f"https://blockchair.com/bitcoin-cash/dashboards/address/{address}", timeout=10)
        if response.status_code == 200:
            data = response.json()
            balance = data.get("data", {}).get(address, {}).get("address", {}).get("balance", 0)
            return balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ Bitcoin Cash: {e}")
    return 0

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 256-–±–∏—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /fibonacci <—á–∏—Å–ª–æ>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )

# –ö–æ–º–∞–Ω–¥–∞ /fibonacci
async def fibonacci_command(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fibonacci <–Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ>")
            return

        start_number = int(context.args[0])  # –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
        a, b = 0, start_number

        while True:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
            private_key = generate_private_key(b)

            # –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏-–≥—Ä–∞—Ñ–∏–∫—É
            emoji_grid = create_emoji_grid(private_key)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Bitcoin-–∞–¥—Ä–µ—Å–∞
            private_key_hex, address = generate_bitcoin_address(private_key)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Bitcoin
            btc_balance, btc_transactions = check_balance(address)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Bitcoin Cash
            bch_balance = check_bitcoin_cash_balance(address)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"```\n"
                f"–ß–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏: {b}\n"
                f"–≠–∫–≤–∞–ª–∞–π–∑–µ—Ä:\n{emoji_grid}\n"
                f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key_hex}\n"
                f"–ê–¥—Ä–µ—Å Bitcoin: {address}\n"
                f"–ë–∞–ª–∞–Ω—Å Bitcoin: {btc_balance} —Å–∞—Ç–æ—à–∏\n"
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Bitcoin: {btc_transactions}\n"
                f"–ë–∞–ª–∞–Ω—Å Bitcoin Cash: {bch_balance} —Å–∞—Ç–æ—à–∏\n"
                f"```\n"
                f"[–û–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å Bitcoin](https://www.blockchain.com/explorer/addresses/btc/{address})"
            )

            # –õ–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if btc_balance > 0 or bch_balance > 0:
                # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ–Ω—É–ª–µ–≤–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await update.message.reply_text(message, parse_mode="Markdown")
            else:
                # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–π, –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
                await context.bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="Markdown")

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
            a, b = b, a + b

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            time.sleep(5)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /fibonacci: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("fibonacci", fibonacci_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
