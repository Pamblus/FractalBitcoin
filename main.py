import hashlib
import ecdsa
import requests
import base58
import numpy as np
import time
import logging
import math
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "TOKEN BOT"
# –ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @TON_OPEN_TON)
CHANNEL_ID = "@TON_OPEN_TON"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —É–∑–æ—Ä–∞ 16x16
def create_symmetric_pattern(number, size=16):
    np.random.seed(number)

    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —É–∑–æ—Ä 16x16
    pattern = np.zeros((size, size), dtype=int)

    # –¶–µ–Ω—Ç—Ä —É–∑–æ—Ä–∞
    center = size // 2

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —É–∑–æ—Ä–∞
    for i in range(size):
        for j in range(size):
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            distance = math.sqrt((i - center) ** 2 + (j - center) ** 2)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—É—Å –∏ –∫–æ—Å–∏–Ω—É—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —É–∑–æ—Ä–∞
            value = math.sin(distance + number) + math.cos(distance + number)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ 0 –∏–ª–∏ 1
            pattern[i, j] = 1 if value > 0 else 0

    # –î–µ–ª–∞–µ–º —É–∑–æ—Ä —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
    pattern = np.maximum(pattern, np.flip(pattern, axis=0))  # –û—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    pattern = np.maximum(pattern, np.flip(pattern, axis=1))  # –û—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–∑–æ—Ä –≤ —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏
    visual_key = ""
    for row in pattern:
        visual_key += "".join(["üü©" if bit == 1 else "‚¨úÔ∏è" for bit in row]) + "\n"

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–∑–æ—Ä –≤ 256-–±–∏—Ç–Ω—ã–π –∫–ª—é—á
    key_data = pattern.tobytes()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ –±–∞–π—Ç—ã
    return visual_key, key_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –∞–¥—Ä–µ—Å–∞ Bitcoin
def generate_bitcoin_address(data):
    hash_object = hashlib.sha256(data)
    private_key = hash_object.digest()
    sk = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)
    vk = sk.verifying_key
    public_key = b"\x04" + vk.to_string()
    sha256_bpk = hashlib.sha256(public_key).digest()
    ripemd160_bpk = hashlib.new("ripemd160", sha256_bpk).digest()
    network_byte = b"\x00"
    hashed_public_key = network_byte + ripemd160_bpk
    checksum = hashlib.sha256(hashlib.sha256(hashed_public_key).digest()).digest()[:4]
    address_bytes = hashed_public_key + checksum
    address = base58.b58encode(address_bytes).decode("utf-8")
    return private_key.hex(), address

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Bitcoin —á–µ—Ä–µ–∑ API
def check_balance_and_transactions(address):
    apis = [
        {
            "url": f"https://blockchain.info/rawaddr/{address}",
            "balance_key": "final_balance",
            "tx_key": "n_tx"
        },
        {
            "url": f"https://api.blockcypher.com/v1/btc/main/addrs/{address}",
            "balance_key": "balance",
            "tx_key": "n_tx"
        },
        {
            "url": f"https://api.bitaps.com/btc/v1/blockchain/address/state/{address}",
            "balance_key": "data.balance",
            "tx_key": "data.received_tx_count"
        },
        {
            "url": f"https://chain.api.btc.com/v3/address/{address}",
            "balance_key": "data.balance",
            "tx_key": "data.tx_count"
        },
        {
            "url": f"https://sochain.com/api/v2/get_address_balance/BTC/{address}",
            "balance_key": "data.confirmed_balance",
            "tx_key": "data.txs"
        }
    ]

    for api in apis:
        try:
            response = requests.get(api["url"], timeout=10)  # –¢–∞–π–º-–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
            if response.status_code == 200:
                data = response.json()

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                balance = data
                for key in api["balance_key"].split("."):
                    balance = balance.get(key, 0)
                    if balance is None:
                        balance = 0
                        break

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                transactions = data
                for key in api["tx_key"].split("."):
                    transactions = transactions.get(key, 0)
                    if transactions is None:
                        transactions = 0
                        break

                return balance, transactions
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API {api['url']}: {e}")
            continue

    return 0, 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Bitcoin Cash —á–µ—Ä–µ–∑ API
def check_bitcoin_cash_balance(address):
    apis = [
        {
            "url": f"https://api.blockchair.com/bitcoin-cash/dashboards/address/{address}",
            "balance_key": "data.{address}.address.balance"
        },
        {
            "url": f"https://api.bitcore.io/api/BCH/mainnet/address/{address}/balance",
            "balance_key": "balance"
        },
        {
            "url": f"https://rest.bitcoin.com/v2/address/details/{address}",
            "balance_key": "balanceSat"
        },
        {
            "url": f"https://api.blockcypher.com/v1/bch/main/addrs/{address}",
            "balance_key": "balance"
        },
        {
            "url": f"https://sochain.com/api/v2/get_address_balance/BCH/{address}",
            "balance_key": "data.confirmed_balance"
        }
    ]

    for api in apis:
        try:
            response = requests.get(api["url"], timeout=10)  # –¢–∞–π–º-–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
            if response.status_code == 200:
                data = response.json()

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                balance = data
                for key in api["balance_key"].split("."):
                    balance = balance.get(key, 0)
                    if balance is None:
                        balance = 0
                        break

                return balance
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API {api['url']}: {e}")
            continue

    return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
async def post_to_channel(context: ContextTypes.DEFAULT_TYPE, message: str):
    await context.bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /pattern
async def pattern_generate(update: Update, context: CallbackContext):
    try:
        number = int(context.args[0]) if context.args else 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∏—Å–ª–æ 1

        while True:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∑–æ—Ä–∞
            visual_key, key_data = create_symmetric_pattern(number)
            private_key, address = generate_bitcoin_address(key_data)
            balance, transactions = check_balance_and_transactions(address)
            bch_balance = check_bitcoin_cash_balance(address)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ```
            message = (
                f"```\n"
                f"–ß–∏—Å–ª–æ: {number}\n"
                f"–£–∑–æ—Ä:\n{visual_key}\n"
                f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key}\n"
                f"–ê–¥—Ä–µ—Å Bitcoin: {address}\n"
                f"–ë–∞–ª–∞–Ω—Å Bitcoin: {balance} —Å–∞—Ç–æ—à–∏\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Bitcoin: {transactions}\n"
                f"–ë–∞–ª–∞–Ω—Å Bitcoin Cash: {bch_balance} —Å–∞—Ç–æ—à–∏\n"
                f"```\n"
                f"[–û–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å Bitcoin](https://www.blockchain.com/explorer/addresses/btc/{address})"
            )

            if balance == 0 and transactions == 0 and bch_balance == 0:
                # –ü–æ—Å—Ç–∏–º –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–π
                await post_to_channel(context, message)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ–Ω—É–ª–µ–≤–æ–π
                await update.message.reply_text(message, parse_mode="Markdown")

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∏—Å–ª–æ –Ω–∞ 1
            number += 1
            time.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏

    except (IndexError, ValueError) as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pattern <—á–∏—Å–ª–æ>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /pattern: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bitcoin-–∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —É–∑–æ—Ä–æ–≤.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/pattern <—á–∏—Å–ª–æ> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —É–∑–æ—Ä–æ–≤\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/pattern <—á–∏—Å–ª–æ> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —É–∑–æ—Ä–æ–≤\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    context.application.stop()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("pattern", pattern_generate))
    application.add_handler(CommandHandler("stop", stop))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

if __name__ == "__main__":
    main()
