import hashlib
import ecdsa
import base58
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import time
import requests

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "TOKEN BOT"
# ID –±–µ—Å–µ–¥—ã, –æ—Ç–∫—É–¥–∞ –±–æ—Ç –±–µ—Ä–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @pambluschat)
SOURCE_CHAT_ID = "@pambluschat"
# ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, @TON_OPEN_TON)
TARGET_CHANNEL_ID = "@TON_OPEN_TON"
# –í–∞—à –ª–∏—á–Ω—ã–π username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
YOUR_USERNAME = "@pamblus"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç
russian_alphabet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
# –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç
english_alphabet = "abcdefghijklmnopqrstuvwxyz"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –±—É–∫–≤—ã –≤ —Ä—É—Å—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ
def get_russian_alphabet_number(letter):
    return russian_alphabet.index(letter) + 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –±—É–∫–≤—ã –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ
def get_english_alphabet_number(letter):
    return english_alphabet.index(letter) + 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —á–∏—Å–ª–æ (–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ –±—É–∫–≤)
def word_to_number(word):
    number_str = ""
    for letter in word.lower():
        if letter in russian_alphabet:
            number_str += f"{get_russian_alphabet_number(letter):02d}"  # –î–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞
        elif letter in english_alphabet:
            number_str += f"{get_english_alphabet_number(letter):02d}"  # –î–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞
    return int(number_str) if number_str else 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —á–∏—Å–ª–∞ (–ø–µ—Ä–≤—ã–µ 3 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏—Ñ—Ä—ã)
def shorten_number(number):
    num_str = str(number)
    if len(num_str) > 10:
        return f"{num_str[:3]}...{num_str[-3:]}"
    return num_str

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–∞
def generate_private_key(number):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ 256-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    private_key_int = number % (2**256)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ –±–∞–π—Ç—ã (32 –±–∞–π—Ç–∞)
    private_key = private_key_int.to_bytes(32, byteorder="big")
    return private_key

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏-–≥—Ä–∞—Ñ–∏–∫–∏ 16x16
def create_emoji_grid(private_key):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ –±–∏–Ω–∞—Ä–Ω—É—é —Å—Ç—Ä–æ–∫—É
    binary_string = "".join(f"{byte:08b}" for byte in private_key)
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 16x16
    grid = ""
    for i in range(16):
        for j in range(16):
            index = i * 16 + j
            if index < len(binary_string):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –±–∏—Ç–∞
                grid += "üü©" if binary_string[index] == "1" else "‚¨úÔ∏è"
            else:
                grid += "‚¨úÔ∏è"  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
        grid += "\n"
    return grid

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Bitcoin-–∞–¥—Ä–µ—Å–∞
def generate_bitcoin_address(private_key):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    sk = ecdsa.SigningKey.from_string(private_key, curve=ecdsa.SECP256k1)
    vk = sk.verifying_key
    public_key = b"\x04" + vk.to_string()  # –ù–µ—Å–∂–∞—Ç—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á

    # –•—ç—à–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    sha256_bpk = hashlib.sha256(public_key).digest()
    ripemd160_bpk = hashlib.new("ripemd160", sha256_bpk).digest()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–µ–≤–æ–π –±–∞–π—Ç (0x00 –¥–ª—è Bitcoin)
    network_byte = b"\x00"
    hashed_public_key = network_byte + ripemd160_bpk

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
    checksum = hashlib.sha256(hashlib.sha256(hashed_public_key).digest()).digest()[:4]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
    address_bytes = hashed_public_key + checksum
    address = base58.b58encode(address_bytes).decode("utf-8")

    return private_key.hex(), address

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Bitcoin —á–µ—Ä–µ–∑ API
def check_balance(address):
    try:
        response = requests.get(f"https://blockchain.info/rawaddr/{address}", timeout=10)
        if response.status_code == 200:
            data = response.json()
            balance = data.get("final_balance", 0)  # –ë–∞–ª–∞–Ω—Å –≤ —Å–∞—Ç–æ—à–∏
            transactions = data.get("n_tx", 0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            return balance, transactions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
    return 0, 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ Bitcoin Cash —á–µ—Ä–µ–∑ API
def check_bitcoin_cash_balance(address):
    try:
        response = requests.get(f"https://blockchair.com/bitcoin-cash/dashboards/address/{address}", timeout=10)
        if response.status_code == 200:
            data = response.json()
            balance = data.get("data", {}).get(address, {}).get("address", {}).get("balance", 0)
            return balance
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ Bitcoin Cash: {e}")
    return 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã
        if update.message.chat.username != SOURCE_CHAT_ID.strip("@"):
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = update.message.text
        if not text:
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ (–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ –±—É–∫–≤)
        number = word_to_number(text)

        # –°–æ–∫—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ
        shortened_number = shorten_number(number)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–∞
        private_key = generate_private_key(number)

        # –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏-–≥—Ä–∞—Ñ–∏–∫—É
        emoji_grid = create_emoji_grid(private_key)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Bitcoin-–∞–¥—Ä–µ—Å–∞
        private_key_hex, address = generate_bitcoin_address(private_key)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Bitcoin
        btc_balance, btc_transactions = check_balance(address)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Bitcoin Cash
        bch_balance = check_bitcoin_cash_balance(address)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"–°–æ–æ–±—â–µ–Ω–∏–µ\n"  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            f"–ß–∏—Å–ª–æ: {shortened_number}\n"
            f"–≠–º–æ–¥–∑–∏-–≥—Ä–∞—Ñ–∏–∫–∞:\n```\n{emoji_grid}\n```\n"
            f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: `{private_key_hex}`\n"
            f"–ê–¥—Ä–µ—Å Bitcoin: `{address}`\n"
            f"–ë–∞–ª–∞–Ω—Å Bitcoin: {btc_balance} —Å–∞—Ç–æ—à–∏\n"
            f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Bitcoin: {btc_transactions}\n"
            f"–ë–∞–ª–∞–Ω—Å Bitcoin Cash: {bch_balance} —Å–∞—Ç–æ—à–∏\n"
        )

        # –õ–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if btc_balance > 0 or bch_balance > 0:
            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 0, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await context.bot.send_message(chat_id=YOUR_USERNAME, text=message, parse_mode="Markdown")
        else:
            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 0, –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            await context.bot.send_message(chat_id=TARGET_CHANNEL_ID, text=message, parse_mode="Markdown")

        # –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
        time.sleep(5)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
